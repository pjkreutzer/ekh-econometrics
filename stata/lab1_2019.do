**************************************************************
*                           EKHM65                           *
*                Lab 1: Introduction to Stata                *
**************************************************************


**TIP: EXECUTE COMMANDS FROM THE DO-FILE EDITOR BY HIGHLIGHTING THE COMMANDS YOU WANT TO EXECUTE AND PRESS CTRL+D



***MEMORY***

* BEFORE WE START WORKING WITH THE DATA, IT IS USEFUL TO KNOW HOW TO SET THE MEMORY.
* SETTING THE MEMORY COULD BE NECESSARY IF A LARGE DATA FILE IS USED OR TO SAVE MEMORY FOR A COMPLICATED PROCESS.

query memory /*query is a command that displays system's parameters*/

set maxvar 3000
set memory 100m /*the need for this command depends on the version of stata you are using*/


***SET WORKING DIRECTORY***

* SETTING THE DIRECTORY TELLS STATA THAT CERTAIN COMMANDS REFER SPECIFICALLY TO A FOLDER ON YOUR COMPUTER

cd "C:\Users\jo1173an"

* 'cd' IS SHORT FOR 'CHANGE DIRECTORY'

use lab1_2019_data.dta, clear
* STATA USES MANY 'options'. OPTIONS ALWAYS COME AFTER A COMMA.  IN THIS INSTANCE, THE OPTION IS CALLED 'clear'.
* 'clear' TELLS STATA TO REMOVE ANY DATA THAT MAY CURRENTLY BE IN ITS MEMORY BEFORE IT OPENS THE NEW FILE.
* IF YOU DO NOT SPECIFY 'clear', STATA WILL NOT BE ABLE TO OPEN THE FILE IF ANOTHER DATA SET IS ALREADY OPEN.
* IN THIS SITUATION, WHEN WE TELL STATA 'use', WE ARE SPECIFYING TO USE A FILE FROM THE WORKING DIRECTORY
* IF THE FILE YOU WANT TO USE IS NOT IN THE WORKING DIRECTORY, STATA WILL NOT DETECT IT OR OPEN IT.


***START LOG FILE***

* LOG FILES ARE A WAY FOR YOU TO RECORD WHAT YOU DO WHILE YOU WORK IN STATA.
* LATER, WHEN YOU RUN MANY REGRESSIONS OR CROSS-TABS, IT IS USEFUL TO BE ABLE TO JUST LOOK IN YOUR LOG TO SEE THE RESULTS.

log using lab_1.log, replace
* STATA will not accept file names containing spaces, hence the quotation marks in the command below

log using "lab_1.log", replace 
* HERE THE OPTION SPECIFIED IS 'replace' WHICH TELLS STATA TO ERASE THE INFORMATION IN THE FILE CALLED 'lab_1.log'
* '.log' FILES CAN BE OPENED USING NOTEPAD OR SIMILAR PROGRAMS
* AND REPLACE IT WITH THE OUTPUT FOLLOWING THE COMMAND 'log using "lab_1.log".
* INSTEAD OF replace YOU CAN ALSO WRITE append WHICH KEEPS THE OLD LOG FILE INFORMATION AND STARTS WRITING THE NEW INFORMATION FROM THE END

***INSPECTING THE DATA SET***

* THERE ARE A NUMBER OF WAYS THAT WE CAN INSPECT DATA IN STATA.
* SOME OF THEM ARE MORE INTERESTED IN THE DATA'S STATISTICAL PROPERTIES AND SOME MORE IN TECHNICAL PROPERTIES. 

describe

* 'describe' TELLS US SOME OF THE TECHNICAL AND PRACTICAL DETAILS OF OUR DATA.
* IT TELLS US THE VARIABLE NAME, HOW IT IS STORED IN THE COMPUTER, AND ITS DEFINITION.

help data type


* BUT IF YOU ARE NEW TO STATA, THESE 'storage types' ARE NOT VERY HELPFUL FOR UNDERSTANDING WHAT THESE VARIABLES ARE.
* BY TYPING 'help...' IN THE COMMAND PROMPT, WE CAN FIND OUT WHAT THESE MEAN.
* THERE ARE TWO BASIC STORAGE TYPES: ALPHABETICAL AND NUMERICAL
* 'STRINGS' (IN THE ABOVE EXAMPLE IT IS WRITTEN AS 'str9') ARE ALPHABETICAL AND OFTEN CANNOT BE USED FOR STATISTICAL ANALYSIS.
* THERE ARE SEVERAL DIFFERENT NUMERICAL STORAGE TYPES. 'byte', 'int' AND 'long' ARE ALL INTEGER STORAGE TYPES (I.E. NO DECIMAL PLACES)
* 'float' AND 'double' ARE DECIMAL STORAGE TYPES.

compress
* TO MORE EFFICIENTLY STORE YOUR VARIABLES, SIMPLY RUN THE COMMAND 'compress'
* THIS WILL MAKE SURE THAT STATA DOES NOT ALLOCATE MORE MEMORY TO A VARIABLE THAN IS NECESSARY.
* WHEN WORKING WITH LARGER DATASETS, THIS CAN SAVE A LOT OF SPACE.
* IN THIS INSTANCE, YOU WILL NOTICE THAT AGE WENT FROM BEING STORED AS 'int' TO BEING STORED AS 'byte'.

inspect age
* 'inspect' IS A SIMPLE COMMAND THAT TELLS US A LOT OF USEFUL INFORMATION ABOUT A VARIABLE.
* IT TAKES UP A LOT OF SCREEN SPACE THOUGH IF YOU USE IT FOR ALL VARIABLES AT ONCE.
* THE COMMAND ALSO PROVIDES A SMALL HISTOGRAM

list var7
browse
* BY TYPING 'list', STATA DISPLAYS ALL OF THE DATA FOR THE GIVEN VARIABLE ON THE SCREEN.

set more off, permanently
* THIS COMMAND TELLS STATA TO PUT EVERYTHING ON THE SCREEN WITHOUT BREAKS.
* IF YOU HAVE A LOT OF OBSERVATIONS AND VARIABLES, THIS MAY NOT BE THE SMARTEST IDEA SINCE STATA'S RESULTS WINDOW WILL ONLY SHOW THE MOST RECENT OUTPUTS.
* THE 'more' SETTING CAN, HOWEVER, INTERUPT STATA FROM COMPLETING A FUNCTION, SO IF YOU HAVE A COMPLICATED AND LONG MODEL WITH MANY ITERATIONS, THE 'more' 
* FUNCTION MAY STOP IT FROM FINISHING. IF YOU 'set more off' THE MODEL CAN COMPLETE RUNNING AND YOU CAN LOOK BACK AT THE LOG FILE AT A LATER POINT TO SEE 
* THE COMPLETE OUTPUT.

list Var7
* STATA IS CASE SENSITIVE. ALL COMMANDS MUST BE WRITTING IN LOWER CASE.
* YOU CAN NAME VARIABLES WITH UPPER CASE LETTERS, BUT THEN MUST WRITE THEM UPPER CASE IN THE COMMANDS.
* I FIND IT EASIER TO JUST USE LOWER CASE ALL OF THE TIME.

list var7 in 36/44
* WHEN WE TYPE 'in 36/44' IT TELLS STATA TO ONLY LIST OBSERVATIONS 36 TO 44

browse 
browse nr_of_kids
br nr_of_kids if wife_present==1
* INSTEAD IF VIEWING THE DATA USING 'list', WE CAN INSTEAD USE THE COMMAND 'browse'
* STATA ALSO OFTEN RECOGNIZES ABBREVIATIONS OF COMMANDS.  IN THIS CASE 'br' IS THE SAME COMMAND AS 'browse'.
* ONLY TYPING 'browse' WILL SHOW US THE ENTIRE DATASET. BUT WE CAN BE MORE PRECISE.
* TYPING 'browse nr_of_kids' WILL SHOW US ONLY THAT VARIABLE
* TYPING 'if wife_present==1' AFTER THE COMMAND WILL SPECIFIY THAT WE ONLY WANT TO SEE THE NUMBER OF KIDS IN A HOUSEHOLD WHEN A WIFE IS PRESENT.

tab education, missing
* USING THE 'tab' COMMAND, WE CAN GET A BASIC ONE-WAY FREQUENCY TABLE, TELLING US HOW MANY OBSERVATIONS ARE PRESENT IN EACH CATEGORY. 

tab education nr_of_kids
tab education nr_of_kids, row
tab education nr_of_kids, column
tab education nr_of_kids, column nofreq
tab education nr_of_kids, row nofreq
* BY SPECIFYING A SECOND VARIABLE, WE CAN GET A TWO-WAY FREQUENCY TABLE.
* USING THE OPTIONS 'row' OR 'column' WILL GIVE US THE PERCENTAGES IN EACH CELL WITH REGARD TO EITHER THE ROW OR THE COLUMN CATEGORY.
* FURTHER SPECIFYING THE OPTION 'nofreq' TELLS STATA THAT WE ONLY WANT TO PERCENTAGES AND NOT THE FREQUENCIES (I.E. NUMBER IN THE CATEGORY)
* THIS MAKES IT A BIT EASIER TO LOOK AT THE TABLE, BECAUSE IT ELIMINATES SOME NUMBERS FROM IT.


***RENAMING VARIABLES AND CREATING LABELS***

* SOMETIMES WHEN WE GET A DATASET FROM ANOTHER SOURCE, IT COMES WITH AMBIGUOUS OR INCONVENIENT VARIABLE NAMES.
* IT IS USEFUL TO BE ABLE TO RENAME THEM INTO SOMETHING YOU AND OTHERS CAN EASILY INTERPRET.

rename var7 name
* HERE, WE TYPE THE COMMAND 'rename' FOLLOWED BY THE CURRENT VARIABLE NAME AND THEN THE NAME WE WISH TO GIVE IT.
* IN THIS INSTANCE, THE VARIABLE IS CURRENTLY NAMED 'var7' AND WE WANT TO RENAME IT 'name'

help label variable

* NOT ONLY CAN WE CHANGE THE VARIABLE NAME, BUT WE CAN ALSO ADD A DESCRIPTION TO IT FOR OUR OWN PERSONAL USE.
label variable name "First name of individual"
describe
 
codebook name
* 'codebook' PROVIDES US WITH YET ANOTHER WAY OF LOOKING AT OUR DATA.
* THIS IS A USEFUL COMMAND FOR LOOKING AT THE VALUES OF CATEGORICAL VARIABLES.
codebook nr_of_kids
codebook education
* 'codebook' ALSO GIVES YOU AN IDEA OF THE DISTRIBUTION OF VALUES FOR NON-STRING VARIABLES


***CREATING CATEGORICAL VARIABLE FROM CONTINUOUS VARIABLE***

* NOW, INSTEAD OF USING A CONTINUOUS FORM OF EDUCATION (I.E. YEARS) WE WANT TO HAVE CATEGORIES.
* THIS IS COMMON PRACTICE, AS IT IS USUALLY NOT THE YEARS SPENT IN SCHOOL, BUT RATHER THE DEGREE EARNED THAT DICTATES THINGS LIKE WAGES AND EMPLOYMENT.

* TO DO THIS, WE WILL USE THE COMMANDS 'generate' AND 'replace'
* 'generate' CREATES AN ENTIRELY NEW VARIABLE (I.E. A NEW COLUMN IN YOUR DATASET)
* 'replace' WILL EDIT AN ALREADY EXISTING VARIABLE
* WHAT IS THE MOST LOGICAL WAY TO CATEGORIZE A CONTINOUS VARIABLE?
* YOU MUST CAREFULLY CHECK FOR MISSING VALUES!!!
* '.' WILL BE CONSIDERED INFINITY!

generate edu = 1 if education<=9
replace edu = 2 if education>=10 & education<=12
replace edu = 3 if education>12
* NOW WE HAVE CATEGORIES THAT MEET THE BASIC CRITERIA FOR A CATEGORICAL VARIABLE. THEY ARE:
*		A. MUTUALLY EXCLUSIVE (NO OVERLAP BETWEEN CATEGORIES)
*		B. ALL ENCOMPASSING (ALL VALUES OF VARIABLE ARE CAPTURED BY A CATEGORY)

codebook education
* WHEN WE RE-EXAMINE THE VARIABLE THAT OUR NEW CATEGORIES ARE BASED ON, THOUGH, WE SEE THAT ONE MISSING VALUE WAS REPORTED.
* MISSING VALUES ARE INTERPRETED BY STATA AS POSITIVE INFINITY 
* THIS CAN BE A BIG PROBLEM WHEN YOU RUN REGRESSIONS, AS IT CAN BIAS YOUR RESULTS

drop edu
* 'drop' IS A COMMAND YOU SHOULD GET USED TO.  
* WHEN WE WORK WITH DATA WE TEND TO MAKE LOTS OF VARIABLES THAT EITHER ARE UNNECCESSARY, TEMPORARILY NECESSARY OR WRONGLY DEFINED.

generate edu = 1 if education<=9
replace edu = 2 if education>=10 & education<=12
replace edu = 3 if education>12 & education!=.
replace edu = 4 if education==.
* HERE WE SPECIFY THAT THE TOP EDUCATIONAL LEVEL SHOULD BE BETWEEN 12 YEARS AND THE HIGHEST REAL NUMBER BEFORE INFINITY (I.E. MISSING VALUES).
* ANOTHER OPTION WOULD BE TO KEEP MISSING VALUES AS A CATEGORY OF THEIR OWN, SO THAT WE DO NOT LOSE THEM FROM THE ANALYSIS.
* IN THIS CASE WE COULD SPECIFY 'replace edu = 99 if education==.' (THE VALUE IS COMPLETELY ARBITRARY)


label define edulbl 1 "Primary" 2 "Secondary" 3 "University" 4 "missing"
label variable edu "Educational Level"
label values edu edulbl
* 'label define' CREATES LABELS THAT ARE ASSIGNED TO SPECIFIC VALUES
* 'label values' APPLIES THE CREATED LABELS TO A VARIABLE'S VALUES

browse education edu

gen flag=1 if education==.
browse education edu flag
drop flag

drop if education==.




* CAREFULLY CONSIDER WHETHER DROPPING MISSING VALUES IS THE BEST OPTION
* YOU MAY WANT TO CREATE A CATEGORY FOR MISSING VARIABLES.
* MISSING VALUES MAY ALSO CONTAIN INFORMATION
 



**********************************************************************************
*NOW IT'S YOUR TURN:
		*DEFINE LABELS FOR THE VALUES OF THE FOLLOWING VARIABLES: home_owner, wife_present
			* 1 = home owner; 0 = non-home owner.... 1 = wife present; 0 = wife absent
		*GENERATE A NEW CATEGORICAL AGE VARIABLE WITH THE AGE GROUPS: <35, 35 - 49, 50+
			* LABEL THE NEW AGE CATEGORIES AS SPECIFIED IN THE LINE ABOVE
********************************************************************************** 



***MEASURES OF CENTRAL TENDENCY OF CONTINUOUS VARIABLES***

* THIS SECTION WILL TALK ABOUT HOW TO IDENTIFY IMPORTANT SUMMARY STATISTICS OF CONTINUOUS VARIABLES

 
sum age labor_income
* THE COMMAND 'sum' GIVES US THE BASIC PARAMETERS OF THE VARIABLES' DISTRIBUTION (I.E. MEAN, STANDARD DEVIATION, MINIMUM AND MAXIMUM)

sum labor_income, detail
* BY SPECIFYING THE 'detail' OPTION, WE GET A BIT MORE INFORMATION ON THE DISTRIBUTION (E.G. PERCENTILES, SKEWNESS, KURTOSIS)

tab edu, sum(labor_income)
* THE 'tab' AND 'sum' COMMANDS CAN BE USED TOGETHER TO GET SUMMARY STATISTICS ALONG WITH FREQUENCIES.
* THIS IS AN EXTREMELY USEFUL WAY TO UNDERSTAND YOUR DATA ESPECIALLY ACROSS CATEGORIES

centile labor_income, centile(0 (5) 100)
centile labor_income, centile(0 (1) 100)
* USING THE 'centile' COMMAND, WE CAN SEE THE VALUE OF THE VARIABLE AT EACH PERCENTILE

histogram labor_income, percent normal bin(30)
* A HISTOGRAM IS A SIMPLE WAY TO SEE HOW YOUR DATA ARE DISTRIBUTED.
* THE OPTION 'normal' OVERLAYS A NORMAL DISTRIBUTION PLOT ONTO YOUR DATA TO GIVE YOU AN IDEA OF HOW YOUR OWN DATA COMPARE.
* THE OPTION 'percent' JUST TELLS STATA TO REPORT THE HISTOGRAM IN TERMS OF PERCENTAGES INSTEAD OF ITS DEFAULT, WHICH IS DENSITY.
* 'bin(X)' TELLS STATA TO USE X NUMBER OF CATEGORIES IN THE HISTOGRAM ON THE X-AXIS; YOU CAN PLAY AROUND WITH THIS AS YOU WISH.
* THE GOAL IS TO GET A GRAPH THAT HELPS US UNDERSTAND THE DATA BETTER.  

histogram labor_income if labor_income<100000, percent normal bin(10)
* MANY COMMANDS CAN USE THE 'if' OPTION.
* HERE, WE USE 'if' TO LOOK AT THE HISTOGRAM FOR A SUBSET OF OUR DATA.
* SOMETIMES THIS IS HELPFUL TO VISUALIZE HOW OUTLIERS MAY BE AFFECTING THE DATA'S DISTRIBUTION.

table edu, contents(mean labor_income)
table edu, contents(median labor_income)
* THESE TABLES ALLOW US TO SEE THE MEAN INCOME AND MEDIAN INCOME PER EDUCATIONAL LEVEL
* THE DEFAULT SPECIFICATION IN STATA IS 'contents(freq)' WHICH YOU DON'T HAVE TO SPECIFY TO GET THE FREQUENCIES AS WE DID EARLIER
* THESE COMMANDS PROVIDE SIMILAR OUTPUTS TO THE 'tab-sum' COMMANDS

table edu, contents(max labor_income)
table edu, contents(min labor_income)
table edu, contents(sd labor_income)
* YOU CAN ALSO SEE A NUMBER OF OTHER SUMMARY STATISTICS WITH THIS OPTION
* HERE WE SPECIFY THE MAXIMUM, MINIMUM AND STANDARD DEVIATION FOR LABOR INCOME IN EACH EDUCATIONAL GROUP


***********************************************************************************
* YOUR TURN:
		* CREATE A HISTOGRAM OF AGE
		* TABULATE THE MEAN AGE OF INDIVIDUALS BY THEIR HOMEOWNER STATUS.
		* TABULATE THE MEDIAN LABOR INCOME BY THE NUMBER OF CHILDREN
***********************************************************************************






* WE CAN ALSO CALCULATE MEANS, MEDIANS, OR A HOST OF OTHER STATISTICS WHEN WE CREATE A NEW VARIABLE

sort  age labor_income name
* THE 'sort' COMMAND TELLS STATA TO ARRANGE THE VARIABLES FROM SMALLEST TO LARGEST (OR FROM A TO Z)
* EACH VARIABLE IN THE COMMAND REPRESENTS A LEVEL FOR SORTING.
* SO, FIRST 'age' WILL BE SORTED FROM SMALLEST TO LARGEST. THEN, WITHIN EACH AGE, 'labor_income' WILL BE SORTED FROM SMALLEST TO LARGEST, ETC.

gsort age -labor_income
* THE 'gsort' COMMAND ALLOWS US TO SORT THINGS FROM LARGEST TO SMALLEST.
* IN THIS CASE, WE SORT AGE FROM SMALLEST TO LARGEST AND THEN WITHIN EACH AGE, WE SORT INCOME FROM LARGEST TO SMALLEST.

bysort education: egen mean_inc = mean(labor_income)
* WE CAN ALSO SIMPLY USE THE 'bysort' COMMAND, WHICH ACTS AS A PREFIX TO OTHER COMMANDS.
* THIS ELIMINATES THE NEED FOR SEVERAL LINES OF CODE.
* 'egen' IS A POWERFUL COMMAND THAT ALLOWS US TO GENERATE VARIABLES ACROSS OBSERVATIONS

sort education
br name education labor_income mean_inc
* TAKE A LOOK AT WHAT THE COMMAND HAS DONE

twoway bar mean_inc education, title(Mean Income by Years of Education) ytitle(Mean Income) xtitle(Years of Education)
* 'twoway' IS A GRAPH TYPE WHICH ALLOWS FOR TWO VARIABLES.
* THERE ARE MANY 'twoway' GRAPHS, SUCH AS 'scatter', 'line' AND OTHERS.
* THIS GIVES US A BAR CHART WITH mean_inc ON THE Y-AXIS AND education ON THE X-AXIS


* WE CAN USE THE 'egen' COMMAND, FOR INSTANCE, TO HELP US MANUALLY CALCULATE THE COVARIANCE OF LABOR INCOME AND YEARS OF EDUCATION
* FORMULA FOR COVARIANCE: (1/n -1)(sum(xi - xavg)(yi - yavg))

egen xmean = mean(education) 	
*GENERATES THE MEAN YEARS OF EDUCATION (xavg)
gen xxmean = education-xmean	
*SUBTRACTS THE MEAN FROM THE VARIABLE (xi-xavg)

egen ymean = mean(labor_income)	
*GENERATES THE MEAN OF LABOR INCOME (yavg)
gen yymean = labor_income-ymean	
*SUBTRACTS THE MEAN FROM THE VARIABLE (yi-yavg)

gen xy = xxmean*yymean			 
*GENERATES THE PRODUCT OF THE MEANS OF YEARS OF EDUCATION AND LABOR INCOME ((xi - xavg)(yi - yavg))
egen xysum = sum(xy)			
*SUMS THE PRODUCT OF THE MEANS (sum(xi - xavg)(yi - yavg))

list xysum in 1
* GIVES US THE NUMERATOR.

display 2062407/48		
* 'display' IS A COMMAND TO USE A CALCULATOR FUNCTION IN STATA.		
* DENOMINATOR COMES FROM n-1, WHERE n IS THE NUMBER OF OBSERVATIONS (i.e. 49 - 1)
* (1/n -1)(sum(xi - xavg)(yi - yavg))


* WE CAN ALSO JUST USE A SIMPLE COMMAND TO FIND OUT THE COVARIANCE
gen ed=education
corr education ed, covariance

corr education labor_income
* IF WE DON'T SPECIFY THE 'covariance' OPTION, WE JUST GET PEARSON'S CORRELATION COEFFICIENT
* THIS IS A STANDARDIZED COEFFICIENT THAT TELLS US THE GENERAL RELATIONSHIP BETWEEN TWO VARIABLES

drop x* y*
* BY PUTTING A STAR AFTER THE X AND Y, WE TELL STATA THAT WE WANT TO DROP EVERYTHING THAT STARTS WITH AN X OR Y


log close
*CLOSES THE LOG FILE

clear
* REMOVES ALL DATA FROM MEMORY




***IMPORTING DATA FROM EXCEL SHEET***

edit

* SIMPLY COPY DATASET FROM EXCEL AND PASTE INTO STATA DATA EDITOR.
* DATA IN EXCEL SHOULD BE ORGANIZED SO THAT ROWS ARE OBSERVATIONS AND COLUMNS ARE VARIABLES.
* MAKE SURE THE FIRST ROW OF EACH COLUMN IS A VARIABLE NAME, STARTING WITH A LETTER AND NOT A NUMBER.
 

destring y2004, replace force
destring y2005, replace force
* HERE, WE USE THE DESTRING COMMAND TO FORCE STATA TO INTERPRET THE NUMBERS AS NUMBERS RATHER THAN LETTERS.
* IT SEES THEM AS LETTERS BECAUSE ONE OF THE OBSERVATIONS HAS A LETTER MIXED IN WITH THE NUMBER.
* WHEN WE USE THIS, HOWEVER, WE WILL LOSE THE OBSERVATIONS THAT ARE CAUSING PROBLEMS.
* USE IT CAREFULLY.

clear
edit

import excel "C:\Users......", firstrow clear



